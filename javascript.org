* Immediately-Invoked Function Expression (IIFE)
Maintain Readability for Conditional Assignments with JavaScript IIFEs
You can use Immediately Invoked Function Expressions (IIFE's) to make conditional assignments more readable and robust

#+BEGIN_SRC javascript
const greeting = (() => {
  if (isJoiningRoom) return 'Welcome'
  if (isLeavingRoom) return 'Bye'
  if (isReEnteringRoom) return 'Welcome back'
  return 'Hi'
})()
#+END_SRC

* String
** uppercase first letter
#+BEGIN_SRC javascript
function capitalizeFirstLetter (string) {
  return string.charAt(0).toUpperCase() + string.slice(1)
}
#+END_SRC

* Array
** move element                                                  :immutable:
#+BEGIN_SRC javascript
function move (arr, oldIndex, requestedNewIndex) {
  const clone = arr.slice(0)
  const newIndex = (() => {
    if (requestedNewIndex >= clone.length) return clone.length + 1
    if (requestedNewIndex < 0) return 0
    return requestedNewIndex
  })()
  clone.splice(newIndex, 0, clone.splice(oldIndex, 1)[0])
  return clone
}
#+END_SRC

** transpose elements                                            :immutable:
#+BEGIN_SRC javascript
function transpose (arr, x, y) {
  const clone = arr.slice(0)
  const tmp = clone[x]
  clone[x] = clone[y]
  clone[y] = tmp
  return clone
}
#+END_SRC

** sort array of objects                                         :immutable:
#+BEGIN_SRC javascript
function sortByKey (arr, key) {
  const clone = arr.slice(0)
  return clone.sort((a, b) => {
    if (a[key] < b[key]) return -1
    if (a[key] > b[key]) return 1
    return 0
  })
}
#+END_SRC

* date
** timedelta as objecct
#+BEGIN_SRC javascript
import moment from 'moment'

export function getTimedeltaObject (momentStart, momentEnd) {
  const diff = momentEnd.diff(momentStart)
  const duration = moment.duration(diff)
  return {
    m: duration.minutes(),
    h: duration.hours(),
    d: duration.days(),
    M: duration.months(),
    y: duration.years()
  }
}
#+END_SRC
* functional
** map
** reduce
*** nested reduce
#+BEGIN_SRC javascript
const v = state.appointments.mitarbeiter.reduce((acc, value) => {
  return acc + value.tage.reduce((accI, valueI) => {
    return accI + valueI.elemente.length
  }, 0)
}, 0)
#+END_SRC
** filter
** find
** stream
** functor
** monad
** lenses

* DOM
** find parent node / element by name
#+BEGIN_SRC javascript
function domGetParentTagByName (node, tagName) {
  let currentNode = node
  const tag = tagName.toUpperCase()
  while (true) {
    if (currentNode.tagName === tag) return currentNode
    if (currentNode.tagName === 'HTML') {
      console.error(`couldn't find parent ${tag}`)
      break
    }
    currentNode = currentNode.parentNode
  }
}
#+END_SRC
