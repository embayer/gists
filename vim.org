#+TITLE: vim

* Resources
https://www.cs.swarthmore.edu/help/vim/home.html

* search and replace

#+BEGIN_SRC
    :range s[ubstitute]/pattern/string/cgiI
#+END_SRC


** metacharacters

| .  | any character except new line                      |    |                               |
| \s | whitespace character                               | \S | non-whitespace character      |
| \d | digit                                              | \D | non-digit                     |
| \x | hex digit                                          | \X | non-hex digit                 |
| \o | octal digit                                        | \O | non-octal digit               |
| \h | head of word character (a,b,c...z,A,B,C...Z and _) | \H | non-head of word character    |
| \p | printable character                                | \P | like \p, but excluding digits |
| \w | word character                                     | \W | non-word character            |
| \a | alphabetic character                               | \A | non-alphabetic character      |
| \l | lowercase character                                | \L | non-lowercase character       |
| \u | uppercase character                                | \U | non-uppercase character       |

** modifiers

| c | Confirm each substitution                                     |
| g | Replace all occurrences in the line (without g - only first). |
| i | Ignore case for the pattern.                                  |
| I | Don't ignore case for the pattern.                            |

** range

| number      | an absolute line number                                            |
| .           | the current line                                                   |
| $           | the last line in the file                                          |
| %           | the whole file. The same as 1,$                                    |
| 't          | position of mark "t"                                               |
| /pattern[/] | the next line where text "pattern" matches.                        |
| ?pattern[?] | the previous line where text "pattern" matches                     |
| \/          | the next line where the previously used search pattern matches     |
| \?          | the previous line where the previously used search pattern matches |
| \&          | the next line where the previously used substitute pattern matches |

** quantifiers
n and m are positive integers (>0)

*** greedy

| *      | matches 0 or more of the preceding characters, ranges or metacharacters .* matches everything including empty line |
| \+     | matches 1 or more of the preceding characters...                                                                   |
| \=     | matches 0 or 1 more of the preceding characters...                                                                 |
| \{n,m} | matches from n to m of the preceding characters...                                                                 |
| \{n}   | matches exactly n times of the preceding characters...                                                             |
| \{,m}  | matches at most m (from 0 to m) of the preceding characters...                                                     |
| \{n,}  | matches at least n of of the preceding characters...                                                               |

*** non greedy

| \{-}    | matches 0 or more of the preceding atom, as few as possible |
| \{-n,m} | matches 1 or more of the preceding characters...            |
| \{-n,}  | matches at lease or more of the preceding characters...     |
| \{-,m}  | matches 1 or more of the preceding characters...            |

** grouping

| &  | the whole matched pattern	                      |
| \L | the following characters are made lowercase        |
| \0 | the whole matched pattern	                      |
| \U | the following characters are made uppercase        |
| \1 | the matched pattern in the first pair of \(\)	  |
| \E | end of \U and \L                                   |
| \2 | the matched pattern in the second pair of \(\)	  |
| \e | end of \U and \L                                   |
| \r | split line in two at this point                    |
| \9 | the matched pattern in the ninth pair of \(\)	  |
| \l | next character made lowercase                      |
| ~  | the previous substitute string	                  |
| \u | next character made uppercase                      |

** split lines on pattern
To operate on the entire file
#+BEGIN_SRC
:%s/; /;\r/
#+END_SRC

To operate only on the selected text
#+BEGIN_SRC
:'<,'>s/; /\r/
#+END_SRC

** remove duplicate lines

#+BEGIN_SRC
:g/^\(.*\)\n\1$/d
#+END_SRC

*** sort unique

#+BEGIN_SRC
:sort u
#+END_SRC

** search editor
| <q-/> | open search editor |

** highlight duplicate lines
#+BEGIN_SRC
    :syn clear Repeat | g/^\(.*\)\n\ze\%(.*\n\)*\1$/exe 'syn match Repeat "^' . escape(getline('.'), '".\^$*[]') . '$"' | nohlsearch
#+END_SRC

** replace ' ' with new line (\n)
#+BEGIN_SRC
    :%s/ /<ctrl-v><enter>/g
    or
    :%s/ /\r/g
#+END_SRC

** substitute umlauts with html entities
#+BEGIN_SRC
    :%s/ü/\&uuml;/eg | :%s/ä/\&auml;/eg | :%s/ö/\&ouml;/eg | :%s/ß/\&szlig;/eg | :%s/Ü/\&Uuml;/eg | :%s/Ä/\&Auml;/eg | :%s/Ö/\&Ouml;/eg
#+END_SRC

** count occcurrences of pattern
#+BEGIN_SRC
    :%s/pattern//gn
#+END_SRC

** delete empty/whitespace lines
#+BEGIN_SRC
    :g/^\s*$/d
#+END_SRC

** delete negated
#+BEGIN_SRC
    :g!/python/d
#+END_SRC

** or
#+BEGIN_SRC
    :v/python/d
#+END_SRC

** delete combined
#+BEGIN_SRC
    :v/error\|warn\|fail/d
#+END_SRC

** delete lines not containing pattern
#+BEGIN_SRC
    :v/pattern/d
#+END_SRC

** substitute whitespace between numbers
#+BEGIN_SRC
    :%s/\([0-9]\)\s\([0-9]\)/\1\2/g
#+END_SRC

** append , to the end of every line
#+BEGIN_SRC
    :%s/$/\,/g
#+END_SRC

** substitute ^M linebreaks with normal linebreaks
#+BEGIN_SRC
    :%s/\r/\r/g
#+END_SRC

** remove datestamp in a python logfile
#+BEGIN_SRC
    :%s/\d\{4}-\d\{2}-\d\{2} \d\{2}\:\d\{2}:\d\{2},\d\{3} //g
#+END_SRC

** remove blank lines
#+BEGIN_SRC
    :g/^$/d
#+END_SRC

** groups
#+BEGIN_SRC
    :%s /\(the group\)/this is \1/g
#+END_SRC

* general

| <Ctrl-a> | increase the number under the cursor (in normal mode) |
| <Ctrl-x> | decrease the number under the cursor (in normal mode) |

** movement

| H        | (H)igh: Jump to the top of the screen                                                                                               |
| M        | (M)iddle: Jump to the middle of the screen                                                                                          |
| L        | (L)ow: Jump to the boottom of the screen                                                                                            |
| e        | (e)nd: Jump to the end of a word                                                                                                    |
| w        | Jump to be beginning of a word                                                                                                      |
| W        | Move forward a WORD (any non-whitespace characters)                                                                                 |
| b        | Move backward to the beginning of a word                                                                                            |
| _        | move to first non-blank character of the line                                                                                       |
| $        | move to end of line                                                                                                                 |
| g_       | move to last non-blank character of the line                                                                                        |
| )        | Jump forward one sentence                                                                                                           |
| (        | Jump backward one sentence                                                                                                          |
| }        | Jump forward one paragraph                                                                                                          |
| {        | Jump backward one paragraph                                                                                                         |
| %        | Jump to corresponding item, e.g. from an open brace to its matching closing brace. See Moving to matching braces for more.          |
| g;       | goto last edit                                                                                                                      |
| gi       | goto last insert                                                                                                                    |
| <Ctrl-o> | jump to last (older) cursor position                                                                                                |
| <Ctrl-i> | jump to next cursor position                                                                                                        |
| <Ctrl-d> | move half-page down                                                                                                                 |
| <Ctrl-u> | move half-page up                                                                                                                   |
| <Ctrl-b> | page up                                                                                                                             |
| <Ctrl-f> | page down                                                                                                                           |
| 0        | move to beginning of line                                                                                                           |
| ''       | Return to the line where the cursor was before the latest jump (Two single quotes.)                                                 |
| ``       | Return to the cursor position before the latest jump (undo the jump) (Two back ticks. This is above the Tab key on some keyboards.) |
| '.       | Jump to the last-changed line.                                                                                                      |
| 42G      | Jump to line 42 (same as 42gg :42<CR>                                                                                               |

** insert

| A | append at the end of line       |
| I | insert at the beginning of line |

** delete

In Normal mode:

| daw      | delete word under cursor                                         |
| caw      | delete word under cursor, go in insert mode                      |
| df<char> | delete all the chars until (and including) the next <char>       |
| D        | delete the characters under the cursor until the end of the line |
| cc       | change (replace) an entire line                                  |
| cw       | change (replace) to the end of word                              |
| c$       | change (replace) to the end of line                              |


* YouCompleteMe

| <Leader>yd | Go to declaration             | YcmCompleter GoToDeclaration |
| <Leader>yg | Go to declaration / reference | YcmCompleter GoTo            |
| <Leader>yr | Go to reference               | YcmCompleter GoToReferences  |
| <Leader>yD | Get documentation             | GetDoc                       |


* commandline

** diff file1 and file2 in splitpanes
#+BEGIN_SRC sh
    vim -d file1 file2
#+END_SRC

** open file in a new tab
#+BEGIN_SRC sh
vim --remote-tab-silent
#+END_SRC

* splits

** max out the height of the current split
| ctrl + w _

** max out the width of the current split
| ctrl + w \vert |

** normalize all split sizes, which is very handy when resizing terminal
| ctrl + w = |

** swap top/bottom or left/right split
| Ctrl+W R |

* tabs

** break out current window into a new tabview
| Ctrl+W T |

** close every window in the current tabview but the current one
| Ctrl+W o |

* formatting

** indent line
| == |

** fix file indentation
| gg=G |

#+BEGIN_SRC
    :retab
#+END_SRC

** reformat paragraph
If you want to wrap lines in a specific area, move the cursor to the text you
want to format and type gq followed by the range.
| gw   |                        |
| gqq  | wrap current line      |
| gqip | wrap current paragraph |

Line length is determined by

#+BEGIN_SRC
:set wrapmargin
:set textwidth
#+END_SRC

* select text
| gv | reselect block |


* more

** get information about visual selection
| g C-g |

** print keycode
| i <ctrl> k <key> |

** show linebreaks
#+BEGIN_SRC
    :set listchars=eol:$,tab:\ \ 
#+END_SRC

** count occurences of a pattern
#+BEGIN_SRC
    :%s/pattern//gn
#+END_SRC

** spelling
#+BEGIN_SRC
    :setlocal spell spelllang=en_us
    :setlocal spell spelllang=de_de
    :set nospell
#+END_SRC

** command history
| q: |

** search history
| q/ |

