* float
** bootstrap flat utilities
#+BEGIN_SRC html
<div class="bg-info clearfix"><!-- flaot only in this container -->
  <button type="button" class="btn btn-secondary float-left">Example Button floated left</button>
  <button type="button" class="btn btn-secondary float-right">Example Button floated right</button>
</div>
#+END_SRC

* display line breaks
\n in strings
#+BEGIN_SRC css
.line-break {
  white-space: pre-line;
}
#+END_SRC

* Tables
- tds inherit width from ths

** Sync vertically stacked tables column widths
#+BEGIN_SRC css
table {
  table-layout: fixed;
}
.table-col-1 {
  width: 20%;
}
.table-col-2 {
  width: 80%;
}
#+END_SRC

** Elements in tables are vertically centered

#+BEGIN_SRC css
td {
  vertical-align: baseline;
}
#+END_SRC

** borders

#+BEGIN_SRC css
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
#+END_SRC

** even/odd
Tip: Look at the :nth-of-type() selector to select the element that is the nth child, of a particular type, of its parent.
#+BEGIN_SRC css
tbody tr:nth-child(even) {
  background: #e9e8e9;
}
tbody tr:nth-child(odd) {
  background: #f5f4f5;
}
#+END_SRC

** Microsoft Edge invisible borders on position: sticky <th>s/<td>s

#+BEGIN_SRC css
td th {
  background-clip: padding-box;
}
#+END_SRC

* z-index
- is inherited

* Forms
** Validation

#+BEGIN_SRC css
div {
  margin-bottom: 10px;
  position: relative;
}

input + span {
  padding-right: 30px;
}

input:invalid+span:after {
  position: absolute;
  content: '✖';
  padding-left: 5px;
}

input:valid+span:after {
  position: absolute;
  content: '✓';
  padding-left: 5px;
}
#+END_SRC

* Centering
https://css-tricks.com/centering-css-complete-guide/

* Hover
** Set color for child element on parent:hover

#+BEGIN_SRC css
/*<div class="my-class"><p>White on hover</p></div>*/
  .my-class:hover p {
    color: white;
  }
#+END_SRC

* Grid
** Definition
#+BEGIN_SRC css
display: grid;
grid-template-columns: repeat(3, 1fr);
grid-template-rows: repeat(3, 1fr);
#+END_SRC

** Fixed height
#+BEGIN_SRC css
grid-auto-rows: 30px;
#+END_SRC

** Position elements
#+BEGIN_SRC css
grid-row-start: 1;
grid-column-start: 2;
grid-row-end: 3;
grid-column-end: 4;

/*shorthand*/
grid-area: 1 / 2 / 3 / 4;
/*grid-row-start grid-column-start grid-row-end grid-column-end*/
#+END_SRC

** Force equal width items
#+BEGIN_SRC css
  .grid {
    display: grid;
    gap: .2em;
    padding: 0.5rem;
    grid-template-columns: repeat(3, minmax(33.33%, 1fr));
  }
#+END_SRC

* Flexbox
** Align left and right
#+BEGIN_SRC html
<div id="container">
  <div id="a">a</div>
  <div id="b">b</div>
</div>
#+END_SRC
#+BEGIN_SRC css
#container {
    display: flex;
    justify-content: space-between;
}
#+END_SRC

** Separate groups
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container
|One Two Three                     Four Five |

We don’t have a justify-items or justify-self property available to us
on the main axis as our items are treated as a group on that
axis. However it is possible to do some individual alignment in order
to separate an item or a group of items from others by using auto
margins along with flexbox.

A common pattern is a navigation bar where some key items are aligned
to the right, with the main group on the left. You might think that
this should be a use case for a justify-self property, however
consider the image below. I have three items on one side and two on
the other. If I were able to use justify-self on item d, it would also
change the alignment of item e that follows, which may or may not be
my intention.

Five items, in two groups. Three on the left and two on the right.

Instead we can target item 4 and separate it from the first three
items by giving it a margin-left value of auto. Auto margins will take
up all of the space that they can in their axis — it is how centering
a block with margin auto left and right works. Each side tries to take
as much space as it can, and so the block is pushed into the middle.

In this live example, I have flex items arranged simply into a row
with the basic flex values, and the class push has margin-left:
auto. You can try removing this, or adding the class to another item
to see how it works.

#+BEGIN_SRC html
<div class="box">
  <div>One</div>
  <div>Two</div>
  <div>Three</div>
  <div class="push">Four</div>
  <div>Five</div>
</div>
#+END_SRC
#+BEGIN_SRC css
.box {
  display: flex;
}
.push {
    margin-left: auto;
}
#+END_SRC

* Circle with text
https://code-boxx.com/css-circles-text/#sec-text
#+BEGIN_SRC html
<div class="res-circle">
  <div class="circle-txt">{{qualifikation.name}}</div>
</div>
#+END_SRC
#+BEGIN_SRC css
.res-circle {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  line-height: 0;
  background: #bcd6ff;
  position: relative;
}
.res-circle:after {
  content: "";
  display: block;
  padding-bottom: 100%;
}
.circle-txt {
  position: absolute;
  bottom: 50%;
  width: 100%;
  text-align: center;
  font-family: arial, sans-serif;
  font-size: xx-small;
  font-weight: bold;
}
#+END_SRC
